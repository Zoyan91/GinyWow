Build a full-stack web app called "GinyWow Thumbnail Optimizer" using React (frontend) + Node.js/Express (backend). Make it fully functional, production-ready, and completely free (no paid APIs).

⚡ Features & Flow:

1. User Upload Section:
   - User can upload a thumbnail image (jpg/png, max 5MB).
   - Show live preview of the uploaded thumbnail immediately in the input area.
   - Validate file type and size. Show error if invalid.

2. Optimize Now Button:
   - When clicked, backend processes the uploaded image using free Node.js image processing library (Sharp or Jimp).
   - Thumbnail Optimization:
     * Enhance brightness, contrast, and sharpness.
     * Auto-center crop if necessary.
     * Make colors slightly more vibrant to improve visual appeal.
   - Return optimized thumbnail image.

3. Results Section (Output):
   - Side-by-side display:
     LEFT: Original Thumbnail
     RIGHT: Optimized Thumbnail
   - Add "Download Optimized Thumbnail" button for the user.
   - Include optional small text below: "Tips: Use bold text, bright colors, and centered subject for best CTR".

4. UI Requirements:
   - Header: "GinyWow – Thumbnail Optimizer"
   - Clean, modern design using TailwindCSS.
   - Responsive layout: desktop (side-by-side preview) and mobile (stacked preview).
   - Rounded cards with soft shadows for thumbnails.
   - Footer: “Optimized by GinyWow”.

5. Tech Stack & Implementation:
   - Frontend: React + TailwindCSS
     * File input with live preview
     * Optimize button triggers API
     * Results display with before/after thumbnails
     * Download button functionality
   - Backend: Node.js + Express
     * Endpoint: POST /optimize
     * Accept uploaded image
     * Use Sharp or Jimp to process image (brightness, contrast, sharpness, color pop, auto-center crop)
     * Return optimized image to frontend
   - Enable CORS for frontend-backend communication
   - Proper error handling (invalid file type, large size, processing error)

Deliverables:
- Fully functional React frontend with TailwindCSS
- Node.js/Express backend with /optimize endpoint
- Before/After image display
- Download optimized image functionality
- Responsive and production-ready code
